id<- which(idx=="cum_vaccines_all")
base_doses <- mean(seir0_100[365 ,id, ]) # cumulative vaccine doses (0) after one years
# Load contact matrix
cmat<-read.csv(here("_rmd","data","contact_TUR.csv",sep=""))
contact_matrix<-as.matrix(cmat)
rownames(contact_matrix)<-c("0-4","5-14","14-64","65+")
colnames(contact_matrix)<-c("0-4","5-14","14-64","65+")
matrix_plot(contact_matrix)
cmat_sym<-((cmat+t(cmat))/2)
# Seed for random numbers
set.seed(1)
# Define total population in the district X of interest
N<-68000
n_age<- 4 # number of age groups
# Population parameters
#  0-4  5-14  15-64  65+
pop_distr<- c(0.16, 0.17, 0.63,  0.04) # Population age distribution
pop <- round(N * pop_distr)
# Process contact matrix: we need to make sure that the matrix is symmetric
# i.e., contacts demanded are equal to contacts offered
cmat_sym<-((cmat+t(cmat))/2)
# Find per-capita contact rate to input into transmission formula
# i.e, correcte dto population size in each group
transmission <- as.matrix(cmat_sym )/
rep(c(t(pop)), each = ncol(cmat_sym))
# Noro Case fatality rate (see Lindsay et al https://bmcinfectdis.biomedcentral.com/articles/10.1186/s12879-015-1168-5))
# NoV CFR by age group
#  0-4  5-14  15-64  65+
mu<-c( 0.04, 0.01, 0.03, 0.63)/1000
# Reported ratios: cases in the community per case reported in hospital outbreak
# (Assumption: this is not exact but e.g, in the UK it is estimated that for every
# reported ~280 can be found in the community)
#  0-4  5-14  15-64  65+
rep_ratio<-c(40,  65,   30,    15)
# Call SEIAR object
seiar0 <- seiar_generator$new(
V_ini = c(1:n_age)*0,
S_ini = as.numeric(round(N*pop_distr - c(1,0,0,0))),
E_ini = c(1:n_age)*0,
I_ini = c(1,0,0,0),
A_ini = c(1:n_age)*0,
VA_ini = c(1:n_age)*0,
R_ini = c(1:n_age)*0,
N_age = n_age,
cfr= mu,
m=transmission,
rep_ratio=rep_ratio,
vac_cov= c(0,0,0,0),
beta = 1 ## <================ Try different values of beta that fit best in the plot below
)
# Multiple runs (100)
t_end<- 365 * 2 # sim time (2 years)
# Run the model
seiar0_100 <- seiar0$run(0:t_end, replicate = 100)
# Variables index
idx<-rownames(seiar0_100[1,,])
# reported cases vs data
t_id<-which(idx=="time")
id<- which(idx=="new_reported_all")
mean <- rowMeans(seiar0_100[, id,])
matplot(seiar0_100[, t_id,],seiar0_100[, id,],
xlab = "Days",
ylab = "Number of GE reported cases",
type = "l", lty = 1, col="grey",
xlim=c(0,30),
ylim=c(0,max(data$Cases)*1.2))
lines(seiar0_100[, 1,1],mean,col="purple")
points(data$Days+5, data$Cases, col = "red", pch = 19)
# Community incidence
id<- which(idx=="new_cases_all")
mean <- rowMeans(seiar0_100[, id,])
matplot(seiar0_100[, t_id,],seiar0_100[, id,],
xlab = "Days",
ylab = "Number of cases",
type = "l", lty = 1, col="grey",
xlim=c(0,30))
lines(seiar0_100[, 1,1],mean,col="purple")
# Cumulative NoV deaths
id<- which(idx=="cum_deaths_all")
mean <- rowMeans(seiar0_100[, id,])
matplot(seiar0_100[, t_id,],seiar0_100[, id,],
xlab = "Days",
ylab = "cumulative of deaths",
type = "l", lty = 1, col="grey",
xlim=c(0,365))
lines(seiar0_100[, 1,1],mean,col="purple")
# Stacked deaths by age
time <- (seiar0_100[, t_id,1])
t<-rep(time,4)
age <-  c(rep(c("0_4") , length(time)),
rep(c("5_14") , length(time)),
rep(c("15_64") , length(time)),
rep(c("65+") , length(time)))
deaths <- c( rowMeans(seiar0_100[,which(idx=="cum_deaths[1]") ,]),
rowMeans(seiar0_100[,which(idx=="cum_deaths[2]") ,]),
rowMeans(seiar0_100[,which(idx=="cum_deaths[3]") ,]),
rowMeans(seiar0_100[,which(idx=="cum_deaths[4]") ,]))
df <- data.frame(t,age,deaths)
# Stacked cumulative deaths over time by age
ggplot(df, aes(fill=age, y=deaths, x=t)) +
geom_bar(position="stack", stat="identity")+
xlab("days")+ ylab("Cumulative Deaths")
# Relative stacked cumulative deaths over time by age
ggplot(df, aes(fill=age, y=deaths, x=t)) +
geom_bar(position="fill", stat="identity")+
xlab("days")+ ylab("Proportion of Cumulative Deaths")
# cases by age
time <- (seiar0_100[, t_id,1])
t<-rep(time,4)
age <-  c(rep(c("0_4") , length(time)),
rep(c("5_14") , length(time)),
rep(c("15_64") , length(time)),
rep(c("65+") , length(time)))
cases <- c( 1000*(rowMeans(seiar0_100[,which(idx=="cum_cases[1]") ,])/pop[1]),
1000*( rowMeans(seiar0_100[,which(idx=="cum_cases[2]") ,])/pop[2]),
1000*(rowMeans(seiar0_100[,which(idx=="cum_cases[3]") ,])/pop[3]),
1000*(rowMeans(seiar0_100[,which(idx=="cum_cases[4]") ,]))/pop[4])
df <- data.frame(t,age,cases)
ggplot(df,aes(color=age, y=cases, x=t)) +
geom_line() +
xlab("days")+ ylab("cumulative incidence rate per 1000 population")
# Analysis output
id<- which(idx=="cum_deaths_all")
base_deaths <- mean(seiar0_100[365 ,id, ]) # cumulative deaths by NoV after one years
id<- which(idx=="cum_cases_all")
base_cases <- mean(seiar0_100[365 ,id, ]) # cumulative cases by NoV after one years
id<- which(idx=="cum_vaccines_all")
base_doses <- mean(seiar0_100[365 ,id, ]) # cumulative vaccine doses (0) after one years
## Scenario 1
seiar1 <- seiar_generator$new(
V_ini = c(1:n_age)*0,
S_ini = as.numeric(round(N*pop_distr - c(1,0,0,0))),
E_ini = c(1:n_age)*0,
I_ini = c(1,0,0,0),
A_ini = c(1:n_age)*0,
VA_ini = c(1:n_age)*0,
R_ini = c(1:n_age)*0,
N_age = n_age,
cfr= mu,
m=transmission,
rep_ratio=rep_ratio,
vac_cov= c(0.1,0.2,0.1,0.3),## <----- Chose coverage of vaccination in different age groups (0 to 1)
vac_eff = 0.75,       ## <------- Fill vaccine efficacy (NoVax or Vomax)
vac_imm = 1/5,       ## <------- Fill rate to AB protection (NoVax or Vomax) (1/days)
beta = 1           ## <--------Fill with your best fitted beta from part 2
)
# Run the model
seiar1_100 <- seiar1$run(0:t_end, replicate = 100)
# Analysis output
id<- which(idx=="cum_deaths_all")
sc1_deaths <- mean(seiar1_100[365 ,id, ]) ## Cumulative deaths after 1 year
id<- which(idx=="cum_cases_all")
sc1_cases <- mean(seiar1_100[365 ,id, ]) ## Cumulative cases after 1 year
id<- which(idx=="cum_vaccines_all")
sc1_doses <- mean(seiar1_100[365 ,id, ]) ## Cumulative doses after 1 year
sc1_avdeaths<-base_deaths-sc1_deaths ## Deaths averted after 1 year
sc1_avcases<-base_cases-sc1_cases    ## Cases averted after 1 year
dose_per_avdeath1<- sc1_doses/sc1_avdeaths ## doses needed to avert 1 death
dose_per_avcase1<- sc1_doses/sc1_avcases ## doses needed to avert 1 case
## Scenario 2
seiar2 <- seiar_generator$new(
V_ini = c(1:n_age)*0,
S_ini = as.numeric(round(N*pop_distr - c(1,0,0,0))),
E_ini = c(1:n_age)*0,
I_ini = c(1,0,0,0),
A_ini = c(1:n_age)*0,
VA_ini = c(1:n_age)*0,
R_ini = c(1:n_age)*0,
N_age = n_age,
cfr= mu,
m=transmission,
rep_ratio=rep_ratio,
vac_cov= c(0.1,0.2,0.1,0.3),## <------- Chose coverage of vaccination in different age groups (0 to 1)
vac_eff = 0.92,       ## <------- Fill vaccine efficacy (NoVax or Vomax)
vac_imm = 1/12,       ## <------- Fill rate to AB protection (NoVax or Vomax) (1/days)
beta = 1           ## <--------Fill with your best fitted beta from part 2
)
# Run the model
seiar2_100 <- seiar2$run(0:t_end, replicate = 100)
# Analysis output
id<- which(idx=="cum_deaths_all")
sc2_deaths <- mean(seiar2_100[365 ,id, ]) ## Cumulative deaths after 1 year
id<- which(idx=="cum_cases_all")
sc2_cases <- mean(seiar2_100[365 ,id, ]) ## Cumulative cases after 1 year
id<- which(idx=="cum_vaccines_all")
sc2_doses <- mean(seiar2_100[365 ,id, ]) ## Cumulative doses after 1 year
sc2_avdeaths<-base_deaths-sc2_deaths ## Deaths averted after 1 year
sc2_avcases<-base_cases-sc2_cases    ## Cases averted after 1 year
dose_per_avdeath2<- sc2_doses/sc2_avdeaths ## doses needed to avert 1 death
dose_per_avcase2<- sc2_doses/sc2_avcases ## doses needed to avert 1 case
## Scenario 3
seiar3 <- seiar_generator$new(
V_ini = c(1:n_age)*0,
S_ini = as.numeric(round(N*pop_distr - c(1,0,0,0))),
E_ini = c(1:n_age)*0,
I_ini = c(1,0,0,0),
A_ini = c(1:n_age)*0,
VA_ini = c(1:n_age)*0,
R_ini = c(1:n_age)*0,
N_age = n_age,
cfr= mu,
m=transmission,
rep_ratio=rep_ratio,
vac_cov= c(0,0.5,0,0),## <------- Chose coverage of vaccination in different age groups (0 to 1)
vac_eff = 0.92,       ## <------- Fill vaccine efficacy (NoVax or Vomax)
vac_imm = 1/12,       ## <------- Fill rate to AB protection (NoVax or Vomax) (1/days)
beta = 1           ## <--------Fill with your best fitted beta from part 2
)
# Run the model
seiar3_100 <- seiar3$run(0:t_end, replicate = 100)
# Analysis output
id<- which(idx=="cum_deaths_all")
sc3_deaths <- mean(seiar3_100[365 ,id, ]) ## Cumulative deaths after 1 year
id<- which(idx=="cum_cases_all")
sc3_cases <- mean(seiar3_100[365 ,id, ]) ## Cumulative cases after 1 year
id<- which(idx=="cum_vaccines_all")
sc3_doses <- mean(seiar3_100[365 ,id, ]) ## Cumulative doses after 1 year
sc3_avdeaths<-base_deaths-sc3_deaths ## Deaths averted after 1 year
sc3_avcases<-base_cases-sc3_cases    ## Cases averted after 1 year
dose_per_avdeath3<- sc3_doses/sc3_avdeaths ## doses needed to avert 1 death
dose_per_avcase3<- sc2_doses/sc2_avcases ## doses needed to avert 1 case
dose_per_avcase3
dose_per_avdeath3
sc3_avdeaths
sc3_avcases
dose_per_avdeath3
dose_per_avcase3<- sc3_doses/sc3_avcases
dose_per_avcase3
sc3_doses
dose_per_avcase2
dose_per_avdeath2
sc2_avcases
sc2_avdeaths
sc2_doses
dose_per_avcase1
dose_per_avdeath1
sc1_avcases
sc1_avdeaths
sc1_doses
library(here)
source(here("_rsource","rmd2md.R"))
site_url<-"C:/Users/JuanVesga/Dropbox/Code/Git/ide-modelling-R-ankara/ide-modelling-R-ankara"
imgs_url<-"C:/Users/JuanVesga/Dropbox/Code/Git/ide-modelling-R-ankara/ide-modelling-R-ankara/_images/"
rmd2md( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_assignments",
#dir_images = "_images",
url_images = "_images/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Load some useful packages:
library(deSolve)  # To solve differential equations
library(reshape2) # To To manipulate our model output
library(ggplot2)  # To produce nice plots!
library(here)     # To ensure that we always are in our working directory
###################
#  Now let's code our  cohort model
# We will call our tota population N. Let's create a parameter for N
N <- 1000
### Some model inputs
# Initial conditions: The cohort mode we want to code has two satges, I Infected  and R (recovered)
# Lets create a vector that contains the state variables of the model
initial_state_values <- c(
I = N,
R = 0)
# Note that we assign we assign initial values to model compartments I and R
# Parameter values per day: We now that the infectious period is on average 2 days
# According to that we can express the recovery rate (gamma) as follows:
parameters <- c(gamma = 1/2)
# TIMESTEPS:
# This is a Vector storing the sequence of timesteps to solve the model at
times <- seq(from = 0, to = 50, by = 1)   # from 0 to 50 days in daily intervals
### Now code the model !
## ODEs
# The model function below takes as input arguments
# (in the following order): time, state and parameters
# Note how the differential equations are coded and compare to your notes !
cohort_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
# Calculating the total population size N (the sum of the number of people in each compartment)
N <- I+R
# The differential equations
dI  <- -gamma * I
dR <- gamma * I
return(list(c(dI, dR)))
})
}
## MODEL OUTPUT (Solving the differential equations using the ode integration algorithm)
# We use the function ode (from deSolve package) and pass the system and parameters
# that we have created above
# The model output will be stored in the data frame output1
output1 <- as.data.frame(ode(y = initial_state_values,
times = times,
func = cohort_model,
parms = parameters))
# Let's give the output a look by typing output1 in the console
# You see that each state variable (I and R) have each one a column
# For plotting this results we what we call long format, so let's use the rehsape
# package and function "melt" to get our output in that format
# turn output data set into long format
output1_long <- melt(as.data.frame(output1), id = "time")
# Let's give the output a look by typing output1_long in the console
## Plot model out
# Plot the number of people in the I and R compartments over time
ggplot(data = output1_long,                                              # specify object containing data to plot
aes(x = time, y = value, colour = variable, group = variable)) +  # assign columns to axes and groups
geom_line(size=2) +                                                    # represent data as lines
xlab("Time (days)")+                                                   # add label for x axis
ylab("Number") +                                                       # add label for y axis
labs(colour = "Compartment",                                           # add legend title
title = "Cohort model")
# Tip: change gamma top 10 days as a rate
parameters <- c(gamma = 1/10)
# Run again
output1 <- as.data.frame(ode(y = initial_state_values,
times = times,
func = cohort_model,
parms = parameters))
# Let's give the output a look by typing output1 in the console
# You see that each state variable (I and R) have each one a column
# For plotting this results we what we call long format, so let's use the rehsape
# package and function "melt" to get our output in that format
# turn output data set into long format
output1_long <- melt(as.data.frame(output1), id = "time")
# Let's give the output a look by typing output1_long in the console
## Plot model out
# Plot the number of people in the I and R compartments over time
ggplot(data = output1_long,                                              # specify object containing data to plot
aes(x = time, y = value, colour = variable, group = variable)) +  # assign columns to axes and groups
geom_line(size=2) +                                                    # represent data as lines
xlab("Time (days)")+                                                   # add label for x axis
ylab("Number") +                                                       # add label for y axis
labs(colour = "Compartment",                                           # add legend title
title = "Cohort model")
knitr::opts_chunk$set(echo = TRUE)
# Load some useful packages:
library(deSolve)  # To solve differential equations
library(reshape2) # To To manipulate our model output
library(ggplot2)  # To produce nice plots!
library(here)     # To ensure that we always are in our working directory
## Add mortality to our cohort model
# Population size:
N <- 1000
# MODEL INPUTS:
# Initial conditions
initial_state_values <- c(
I = N,
M = 0,
R = 0)
# Parameter values per day
# For a CFR of 30% , what is mu?
mu= 0.5*0.3/(1-0.3) # gamma*CFR/(1-CFR)
parameters <- c(gamma = 1/2, mu)
# TIMESTEPS:
# Vector storing the sequence of timesteps to solve the model at
times <- seq(from = 0, to = 50, by = 1)   # from 0 to 365 days in daily intervals
# MODEL FUNCTION:
# The model function takes as input arguments (in the following order): time, state and parameters
cohort_model2 <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
# Calculating the total population size N (the sum of the number of people in each compartment)
N <- I+R
# The differential equations
dI <- -(gamma+mu) * I
dM <- I*mu
dR <- gamma * I
return(list(c(dI, dM, dR)))
})
}
# MODEL OUTPUT (solving the differential equations):
# Solving the differential equations using the ode integration algorithm
output2 <- as.data.frame(ode(y = initial_state_values,
times = times,
func = cohort_model2,
parms = parameters))
# turn output dataset into long format
output2_long <- melt(as.data.frame(output2), id = "time")
# Plot the new output
ggplot(data = output2_long,
aes(x = time, y = value, colour = variable, group = variable)) +
geom_line(size=2) +
xlab("Time (days)")+
ylab("Number") +
labs(colour = "Compartment",
title = "Cohort model")
# Load some useful packages:
library(deSolve)  # To solve differential equations
library(reshape2) # To To manipulate our model output
library(ggplot2)  # To produce nice plots!
library(here)     # To ensure that we always are in our working directory
## Add mortality to our cohort model
# Population size:
N <- 1000
# MODEL INPUTS:
# Initial conditions
initial_state_values <- c(
I = N,
M = 0,
R = 0)
# Parameter values per day
# For a CFR of 30% , what is mu?
mu= 0.5*0.3/(1-0.3) # gamma*CFR/(1-CFR)
parameters <- c(gamma = 1/2, mu)
# TIMESTEPS:
# Vector storing the sequence of timesteps to solve the model at
times <- seq(from = 0, to = 50, by = 1)   # from 0 to 365 days in daily intervals
# MODEL FUNCTION:
# The model function takes as input arguments (in the following order): time, state and parameters
cohort_model2 <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
# Calculating the total population size N (the sum of the number of people in each compartment)
N <- I+R
# The differential equations
dI <- -(gamma+mu) * I
dM <- I*mu
dR <- gamma * I
return(list(c(dI, dM, dR)))
})
}
# MODEL OUTPUT (solving the differential equations):
# Solving the differential equations using the ode integration algorithm
output2 <- as.data.frame(ode(y = initial_state_values,
times = times,
func = cohort_model2,
parms = parameters))
# turn output dataset into long format
output2_long <- melt(as.data.frame(output2), id = "time")
# Plot the new output
ggplot(data = output2_long,
aes(x = time, y = value, colour = variable, group = variable)) +
geom_line(size=2) +
xlab("Time (days)")+
ylab("Number") +
labs(colour = "Compartment",
title = "Cohort model")
# For that, we might want to see the proportion of people in each compartment
output3_long<- output2_long
output3_long$value<-output2_long$value/N
# Plot the proportion of people in the S, I and R compartments over time
ggplot(data = output3_long,
aes(x = time, y = value, colour = variable, group = variable)) +
geom_line(size=2) +
xlab("Time (days)")+
ylab("Number") +
labs(colour = "Compartment",
title = "Cohort model")
# Can you tell from the graph what proportion of people have died as a result of the disease?
# Load some useful packages:
library(deSolve)  # To solve differential equations
library(reshape2) # To To manipulate our model output
library(ggplot2)  # To produce nice plots!
library(here)     # To ensure that we always are in our working directory
## Add mortality to our cohort model
# Population size:
N <- 1000
# MODEL INPUTS:
# Initial conditions
initial_state_values <- c(
I = N,
M = 0,
R = 0)
# Parameter values per day
# For a CFR of 30% , what is mu?
mu= 0.5*0.3/(1-0.3) # gamma*CFR/(1-CFR)
parameters <- c(gamma = 1/2, mu)
# TIMESTEPS:
# Vector storing the sequence of timesteps to solve the model at
times <- seq(from = 0, to = 50, by = 1)   # from 0 to 365 days in daily intervals
# MODEL FUNCTION:
# The model function takes as input arguments (in the following order): time, state and parameters
cohort_model2 <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
# Calculating the total population size N (the sum of the number of people in each compartment)
N <- I+R+M
# The differential equations
dI <- -(gamma+mu) * I
dM <- I*mu
dR <- gamma * I
return(list(c(dI, dM, dR)))
})
}
# MODEL OUTPUT (solving the differential equations):
# Solving the differential equations using the ode integration algorithm
output2 <- as.data.frame(ode(y = initial_state_values,
times = times,
func = cohort_model2,
parms = parameters))
# turn output dataset into long format
output2_long <- melt(as.data.frame(output2), id = "time")
# Plot the new output
ggplot(data = output2_long,
aes(x = time, y = value, colour = variable, group = variable)) +
geom_line(size=2) +
xlab("Time (days)")+
ylab("Number") +
labs(colour = "Compartment",
title = "Cohort model")
# For that, we might want to see the proportion of people in each compartment
output3_long<- output2_long
output3_long$value<-output2_long$value/N
# Plot the proportion of people in the S, I and R compartments over time
ggplot(data = output3_long,
aes(x = time, y = value, colour = variable, group = variable)) +
geom_line(size=2) +
xlab("Time (days)")+
ylab("Number") +
labs(colour = "Compartment",
title = "Cohort model")
# Can you tell from the graph what proportion of people have died as a result of the disease?
View(output2_long)
